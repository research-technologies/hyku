# Generated by hyrax:models:install
class FileSet < ActiveFedora::Base
  #please thismust be above include Hyrax::FileSetBehavior because `Hyrax::BasicMetadata` include  which comes
  #from Hyrax::FileSetBehavior needs to be at the bottom of the new metadata field added by us
  include Ubiquity::WorkAndCollectionMetadata
  include ::Hyrax::FileSetBehavior
  include Ubiquity::UpdateSharedIndex
  include Ubiquity::ApiUtilityMethods

  before_destroy :remove_rendering_relationship
  before_save :set_account_cname
  before_update :fetch_file_sets_and_create_work_expiry_service
  after_save :parent_save_to_update_file_visibility_facet, on: [:update]
  after_save :post_to_importer, on: [:create]

  # Hyku has its own FileSetIndexer: app/indexers/file_set_indexer.rb
  # It overrides Hyrax to inject IIIF behavior.
  self.indexer = FileSetIndexer

  def rendering_ids
    to_param
  end

  def _account_cname
    parent.try(:account_cname)
  end

  private

    def set_account_cname
      if self.account_cname.blank?
        account_query
        self.account_cname = account_query.cname
      end
    end

    # If any parent objects are pointing at this object as their
    # rendering, remove that pointer.
    def remove_rendering_relationship
      parent_objects = parents
      return if parent_objects.empty?
      parent_objects.each do |work|
        if work.rendering_ids.include(id)
          new_rendering_ids = work.rendering_ids.delete(id)
          work.update(rendering_ids: new_rendering_ids)
        end
      end
    end

    def fetch_file_sets_and_create_work_expiry_service
      embargo_condition_check = under_embargo? || active_lease?
      if embargo_condition_check && _account_cname.present?
        work_service = WorkExpiryService.find_or_create_by(work_id: id)
        release_date = under_embargo? ? embargo.embargo_release_date : lease.lease_expiration_date
        work_service.update(work_type: 'file', tenant_name: _account_cname, expiry_time: release_date)
      end
    end

    def parent_save_to_update_file_visibility_facet
      self && self.parent && self.parent.save if self.visibility_changed?
    end

    def post_to_importer
      account_query
      UbiquityPostFileToImporterJob.perform_later(self.id, account_query.tenant)
    end

    def account_query
       @object ||= Account.where("tenant ilike ?", "%#{Apartment::Tenant.current}%").first
    end
end
